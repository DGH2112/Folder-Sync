unit TestFileComparision;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Windows, FileComparision, SysUtils, Contnrs, Classes;
type

  TestTFileRecord = class(TTestCase)
  private
    FFileRecord: TFileRecord;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestFileName;
    procedure TestSize;
    procedure TestAttribute;
    Procedure TestDateTime;
    Procedure TestStatus;
  end;

  TestTFileList = class(TTestCase)
  private
    FFileList: TFileList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    Procedure TestCount;
    Procedure TestFolderPath;
    Procedure TestTotalSize;
    Procedure TestFiles;
  end;

  TestTCompareFolders = class(TTestCase)
  private
    FCompareFolders: TCompareFolders;
    function CheckDates(strLeftDate, strRightDate: String; iSize: Integer;
      Check : TCheckDifference): Boolean;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCheckDifference;
    Procedure TestCheckFolders;
  end;

implementation

procedure TestTFileRecord.SetUp;
begin
  FFileRecord := TFileRecord.Create('Daves File.Txt', 123456, faArchive,
    DateTimeToFileDate(StrToDateTime('07/01/2007 10:11:12')), stNewer);
end;

procedure TestTFileRecord.TearDown;
begin
  FFileRecord.Free;
  FFileRecord := nil;
end;

procedure TestTFileRecord.TestAttribute;
begin
  Check(FFileRecord.Attributes = faArchive);
end;

procedure TestTFileRecord.TestDateTime;
begin
  Check(FileDateToDateTime(FFileRecord.DateTime) = StrToDateTime('07/01/2007 10:11:12'));
end;

procedure TestTFileRecord.TestFileName;

begin
  Check(FFileRecord.FileName = 'Daves File.Txt');
end;

procedure TestTFileRecord.TestSize;
begin
  Check(FFileRecord.Size = 123456);
end;

procedure TestTFileRecord.TestStatus;
begin
  Check(FFileRecord.Status = stNewer);
  FFileRecord.Status := stOlder;
  Check(FFileRecord.Status = stOlder);
end;

procedure TestTFileList.SetUp;
begin
  FFileList := TFileList.Create('.\Test Compare Folders\Left Folder\', '*.*',
    Nil, '');
end;

procedure TestTFileList.TearDown;
begin
  FFileList.Free;
  FFileList := nil;
end;

procedure TestTFileList.TestCount;
begin
  Check(FFileList.Count = 4);
end;

procedure TestTFileList.TestFiles;
begin
  Check(FFileList[1].FileName = '20 Bytes.Txt');
  Check(FFileList[1].Size = 20);
end;

procedure TestTFileList.TestFolderPath;
begin
  Check(FFileList.FolderPath = '.\Test Compare Folders\Left Folder\');
end;

procedure TestTFileList.TestTotalSize;
begin
  Check(FFileList.TotalSize = 100);
end;

procedure TestTCompareFolders.SetUp;
begin
  FCompareFolders := TCompareFolders.Create('.\Test Compare Folders\Left Folder\',
    '*.*', '.\Test Compare Folders\Right Folder\', '*.*', Nil, Nil, '', 0, []);
end;

procedure TestTCompareFolders.TearDown;
begin
  FCompareFolders.Free;
  FCompareFolders := nil;
end;

Function TestTCompareFolders.CheckDates(strLeftDate, strRightDate : String;
  iSize : Integer; Check : TCheckDifference) : Boolean;

Var
  dtLeftDate, dtRightDate : TDateTime;
  iLeftDate, iRightDate : Integer;

Begin
  dtLeftDate := StrToDateTime(strLeftDate);
  dtRightDate := StrToDateTime(strRightDate);
  iLeftDate := DateTimeToFileDate(dtLeftDate);
  iRightDate := DateTimeToFileDate(dtRightDate);
  Result := FCompareFolders.CheckDifference(iLeftDate - iRightDate, iSize, Check);
End;

procedure TestTCompareFolders.TestCheckDifference;

begin
  Check(Not CheckDates('07/01/2007 11:11:12', '07/01/2007 10:11:12', 0, cdNewer), 'Same Day, 1 Hour After');
  Check(Not CheckDates('07/01/2007 09:11:12', '07/01/2007 10:11:12', 0, cdOlder), 'Same Day, 1 Hour Before');
  Check(CheckDates('07/01/2007 09:41:12', '07/01/2007 10:11:12', 0, cdOlder), 'Same Day, 1/2 Hour Before');
  Check(CheckDates('07/01/2007 08:41:12', '07/01/2007 10:11:12', 0, cdOlder), 'Same Day, 1 1/2 Hours Before');
  Check(CheckDates('07/01/2007 10:41:12', '07/01/2007 10:11:12', 0, cdNewer), 'Same Day, 1/2 hour After');
  Check(CheckDates('07/01/2007 11:41:12', '07/01/2007 10:11:12', 0, cdNewer), 'Same Day, 1 1/2 Hours After');
  Check(Not CheckDates('07/01/2007 10:11:12', '07/01/2007 10:11:12', 0, cdOlder), 'Same Day, Same Time');
  Check(Not CheckDates('08/01/2007 00:11:12', '07/01/2007 23:11:12', 0, cdNewer), 'Diff Day, 1 Hour After');
  Check(Not CheckDates('07/01/2007 23:11:12', '08/01/2007 00:11:12', 0, cdOlder), 'Diff Day, 1 Hour Before');
  Check(CheckDates('07/01/2007 23:41:12', '08/01/2007 00:11:12', 0, cdOlder), 'Diff Day, 1/2 Hour Before');
  Check(CheckDates('07/01/2007 22:41:12', '08/01/2007 00:11:12', 0, cdOlder), 'Diff Day, 1 1/2 Hours Before');
  Check(CheckDates('08/01/2007 00:11:12', '07/01/2007 23:41:12', 0, cdNewer), 'Diff Day, 1/2 Hour Before');
  Check(CheckDates('08/01/2007 00:41:12', '07/01/2007 23:11:12', 0, cdNewer), 'Diff Day, 1 1/2 Hours Before');
end;


procedure TestTCompareFolders.TestCheckFolders;
begin
  Check(FCompareFolders.LeftFldr.Count = 4);
  Check(FCompareFolders.LeftFldr[1].FileName = '20 Bytes.Txt');
  Check(FCompareFolders.LeftFldr[1].Size = 20);
  Check(FCompareFolders.LeftFldr.FolderPath = '.\Test Compare Folders\Left Folder\');
  Check(FCompareFolders.LeftFldr.TotalSize = 100);
  Check(FCompareFolders.RightFldr.Count = 4);
  Check(FCompareFolders.RightFldr[1].FileName = '30 Bytes.Txt');
  Check(FCompareFolders.RightFldr[1].Size = 30);
  Check(FCompareFolders.RightFldr.FolderPath = '.\Test Compare Folders\Right Folder\');
  Check(FCompareFolders.RightFldr.TotalSize = 140);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest('File Comparison Tests', TestTFileRecord.Suite);
  RegisterTest('File Comparison Tests', TestTFileList.Suite);
  RegisterTest('File Comparison Tests', TestTCompareFolders.Suite);
end.


